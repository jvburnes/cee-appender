# configure an AMQP input.   AMQP input params are as follows

#input {
#  amqp {
#    debug => ... # boolean
#    durable => ... # boolean, default: true
#    exchange_type => ... # ["fanout", "direct", "topic"] (required)
#    format => ... # ["plain", "json", "json_event"]
#    host => ... # string (required)
#    key => ... # string
#    message_format => ... # string
#    name => ... # string (required)
#    password => ... # password, default: "guest"
#    port => ... # number, default: 5672
#    queue_durable => ... # boolean
#    queue_name => ... # string
#    ssl => ... # boolean
#    tags => ... # array
#    type => ... # string (required)
#    user => ... # string, default: "guest"
#    verify_ssl => ... # boolean
#    vhost => ... # string, default: "/"
#  }
#}

input {
  amqp {
    # exchange name
    name => "org.logs.topics"
    durable => true
    # what kind of exchange architecture
    exchange_type => "topic"
    # consumes all events on the exchange
    type => "all"
    queue_name => "logger-listen-topic"
    queue_durable => true
    # topic to bind to
    key => "org.#"
    #
    # connection details
    #
    # host that rabbitmq lives on
    host => "localhost"
    # credentials (default)
    user => "guest"
    password => "guest"
    format => "json"
    #message_format => "%{id} %{time} %{action} %{status} %{p_sys_id} %{p_prod_id}"
  }
}

# index via pattern matching.  index a record if it matches one of these
#filter {
#  grok {
#    type => "syslog" # for logs of type "syslog"
#    pattern => "%{SYSLOGLINE}"
#    # You can specify multiple 'pattern' lines
#  }
#
#  grok {
#    type => "apache-access" # for logs of type 'apache-access'
#    pattern => "%{COMBINEDAPACHELOG}"
#  }
#
#  date {
#    type => "syslog"
#
#    # The 'timestamp' and 'timestamp8601' names are for fields in the
#    # logstash event.  The 'SYSLOGLINE' grok pattern above includes a field
#    # named 'timestamp' that is set to the normal syslog timestamp if it
#    # exists in the event.
#    timestamp => "MMM  d HH:mm:ss"   # syslog 'day' value can be space-leading
#    timestamp => "MMM dd HH:mm:ss"
#    timestamp8601 => ISO8601 # Some syslogs use ISO8601 time format
#  }
#
#  date {
#    type => "apache-access"
#    timestamp => "dd/MMM/yyyy:HH:mm:ss Z"
#  }
#}

#filter {
#   mutate {
#      remove => "@message"
#   }
#
#   mutate {
#      replace => [ "@message", "%{Event.text}" ]
#   }
#}

#output {
#  elasticsearch {
#    bind_host => ... # string
#    cluster => ... # string
#    embedded => ... # boolean
#    embedded_http_port => ... # string, default: "9200-9300"
#    host => ... # string
#    index => ... # string, default: "logstash-%{+YYYY.MM.dd}"
#    port => ... # number, default: 9300
#    type => ... # string, default: "%{@type}"
#  }
#}

output {
  # output to stdout for debugging
  stdout {
	debug => true
  }

  # If your elasticsearch server is discoverable with multicast, use this:
  #elasticsearch { }

  # If you can't discover using multicast, set the address explicitly
  elasticsearch {
  #  host => "localhost"
	host => "localhost"
	index => "logstash-%{+YYYY.MM.dd}"
  }
}

